"""
Herramientas (Tools) para el EcoAgent
=====================================

Este m√≥dulo contiene las herramientas que el agente puede utilizar para
automatizar tareas relacionadas con devoluciones de productos.

Autor: EcoAgent Team
Fecha: 2024
"""

import json
import logging
from datetime import datetime, timedelta
from typing import Dict, Any, Optional
import random
import string

# Configurar logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class ProductoTools:
    """Clase que contiene las herramientas para manejo de productos y devoluciones."""
    
    def __init__(self):
        """Inicializar la clase con datos simulados."""
        # Base de datos simulada de productos
        self.productos_db = {
            "PROD001": {
                "nombre": "Smartphone EcoTech Pro",
                "categoria": "Electr√≥nicos",
                "precio": 299.99,
                "garantia_dias": 30,
                "elegible_devolucion": True
            },
            "PROD002": {
                "nombre": "Laptop EcoFriendly",
                "categoria": "Computadoras",
                "precio": 899.99,
                "garantia_dias": 15,
                "elegible_devolucion": True
            },
            "PROD003": {
                "nombre": "Auriculares Wireless",
                "categoria": "Audio",
                "precio": 79.99,
                "garantia_dias": 14,
                "elegible_devolucion": True
            },
            "PROD004": {
                "nombre": "Tablet EcoPad",
                "categoria": "Tablets",
                "precio": 199.99,
                "garantia_dias": 7,
                "elegible_devolucion": False  # Producto no elegible
            }
        }
        
        # Base de datos simulada de clientes
        self.clientes_db = {
            "CLI001": {"nombre": "Juan P√©rez", "email": "juan@email.com", "tipo": "premium"},
            "CLI002": {"nombre": "Mar√≠a Garc√≠a", "email": "maria@email.com", "tipo": "est√°ndar"},
            "CLI003": {"nombre": "Carlos L√≥pez", "email": "carlos@email.com", "tipo": "premium"},
        }
    
    def verificar_elegibilidad_producto(self, producto_id: str, fecha_compra: str) -> str:
        """
        Verifica si un producto es elegible para devoluci√≥n seg√∫n su ID y fecha de compra.
        
        Args:
            producto_id (str): ID del producto a verificar
            fecha_compra (str): Fecha de compra en formato YYYY-MM-DD
            
        Returns:
            str: Resultado de la verificaci√≥n con detalles
        """
        try:
            logger.info(f"Verificando elegibilidad para producto {producto_id} comprado el {fecha_compra}")
            
            # Verificar si el producto existe
            if producto_id not in self.productos_db:
                return f"‚ùå Error: El producto {producto_id} no existe en nuestro sistema."
            
            producto = self.productos_db[producto_id]
            
            # Verificar si el producto es elegible para devoluci√≥n
            if not producto["elegible_devolucion"]:
                return f"‚ùå El producto {producto['nombre']} ({producto_id}) no es elegible para devoluci√≥n seg√∫n nuestras pol√≠ticas."
            
            # Calcular d√≠as desde la compra
            try:
                fecha_compra_obj = datetime.strptime(fecha_compra, "%Y-%m-%d")
                dias_transcurridos = (datetime.now() - fecha_compra_obj).days
            except ValueError:
                return f"‚ùå Error: Formato de fecha inv√°lido. Use YYYY-MM-DD"
            
            # Verificar si est√° dentro del per√≠odo de garant√≠a
            if dias_transcurridos > producto["garantia_dias"]:
                return f"‚ùå El producto {producto['nombre']} ({producto_id}) ya no es elegible para devoluci√≥n. " \
                       f"Han transcurrido {dias_transcurridos} d√≠as desde la compra, " \
                       f"pero el per√≠odo de devoluci√≥n es de {producto['garantia_dias']} d√≠as."
            
            # Verificar condiciones adicionales
            condiciones_adicionales = self._verificar_condiciones_adicionales(producto_id, dias_transcurridos)
            
            resultado = f"‚úÖ El producto {producto['nombre']} ({producto_id}) ES ELEGIBLE para devoluci√≥n.\n" \
                      f"üìÖ D√≠as transcurridos: {dias_transcurridos}/{producto['garantia_dias']}\n" \
                      f"üí∞ Precio: ${producto['precio']}\n" \
                      f"üì¶ Categor√≠a: {producto['categoria']}\n" \
                      f"{condiciones_adicionales}"
            
            logger.info(f"Verificaci√≥n exitosa para producto {producto_id}")
            return resultado
            
        except Exception as e:
            error_msg = f"‚ùå Error interno al verificar elegibilidad: {str(e)}"
            logger.error(error_msg)
            return error_msg
    
    def generar_etiqueta_devolucion(self, producto_id: str, cliente_id: str) -> str:
        """
        Genera una etiqueta de devoluci√≥n para un producto y cliente espec√≠ficos.
        
        Args:
            producto_id (str): ID del producto
            cliente_id (str): ID del cliente
            
        Returns:
            str: Etiqueta de devoluci√≥n generada con instrucciones
        """
        try:
            logger.info(f"Generando etiqueta de devoluci√≥n para producto {producto_id} y cliente {cliente_id}")
            
            # Verificar que el producto existe
            if producto_id not in self.productos_db:
                return f"‚ùå Error: El producto {producto_id} no existe en nuestro sistema."
            
            # Verificar que el cliente existe
            if cliente_id not in self.clientes_db:
                return f"‚ùå Error: El cliente {cliente_id} no existe en nuestro sistema."
            
            producto = self.productos_db[producto_id]
            cliente = self.clientes_db[cliente_id]
            
            # Generar c√≥digo √∫nico de devoluci√≥n
            codigo_devolucion = self._generar_codigo_devolucion()
            
            # Crear etiqueta de devoluci√≥n
            etiqueta = f"""
üè∑Ô∏è ETIQUETA DE DEVOLUCI√ìN GENERADA
=====================================

üìã Informaci√≥n de la Devoluci√≥n:
‚Ä¢ C√≥digo de Devoluci√≥n: {codigo_devolucion}
‚Ä¢ Producto: {producto['nombre']} ({producto_id})
‚Ä¢ Cliente: {cliente['nombre']} ({cliente_id})
‚Ä¢ Fecha de Generaci√≥n: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

üì¶ Instrucciones de Empaque:
1. Envuelva el producto en su empaque original si est√° disponible
2. Incluya todos los accesorios y manuales
3. Use una caja resistente para el env√≠o
4. Pegue esta etiqueta en el exterior del paquete

üöö Informaci√≥n de Env√≠o:
‚Ä¢ Direcci√≥n de Retorno: EcoTech Returns Center, Calle Verde 123, Ciudad Eco
‚Ä¢ C√≥digo Postal: ECO-001
‚Ä¢ Tel√©fono de Contacto: +1-800-ECO-TECH

‚ö†Ô∏è Notas Importantes:
‚Ä¢ El reembolso se procesar√° dentro de 5-7 d√≠as h√°biles despu√©s de recibir el producto
‚Ä¢ Mantenga este c√≥digo de devoluci√≥n para seguimiento
‚Ä¢ Para consultas, contacte: soporte@ecotech.com

üîó Enlace de Seguimiento: https://ecotech.com/track/{codigo_devolucion}
"""
            
            logger.info(f"Etiqueta generada exitosamente: {codigo_devolucion}")
            return etiqueta.strip()
            
        except Exception as e:
            error_msg = f"‚ùå Error interno al generar etiqueta: {str(e)}"
            logger.error(error_msg)
            return error_msg
    
    def consultar_politicas_devolucion(self, categoria: str = None) -> str:
        """
        Consulta las pol√≠ticas de devoluci√≥n seg√∫n la categor√≠a del producto.
        
        Args:
            categoria (str, optional): Categor√≠a espec√≠fica a consultar
            
        Returns:
            str: Pol√≠ticas de devoluci√≥n aplicables
        """
        try:
            logger.info(f"Consultando pol√≠ticas de devoluci√≥n para categor√≠a: {categoria}")
            
            politicas_generales = """
üìã POL√çTICAS GENERALES DE DEVOLUCI√ìN
====================================

‚è∞ Per√≠odos de Devoluci√≥n:
‚Ä¢ Electr√≥nicos: 30 d√≠as
‚Ä¢ Computadoras: 15 d√≠as  
‚Ä¢ Audio: 14 d√≠as
‚Ä¢ Tablets: 7 d√≠as

‚úÖ Condiciones para Devoluci√≥n:
‚Ä¢ Producto en estado original
‚Ä¢ Empaque y accesorios incluidos
‚Ä¢ Recibo de compra v√°lido
‚Ä¢ No haber sido usado excesivamente

‚ùå Productos No Elegibles:
‚Ä¢ Productos personalizados
‚Ä¢ Software con licencia activada
‚Ä¢ Productos de higiene personal
‚Ä¢ Alimentos perecederos

üí∞ Proceso de Reembolso:
‚Ä¢ Reembolso completo si cumple condiciones
‚Ä¢ Procesamiento en 5-7 d√≠as h√°biles
‚Ä¢ Mismo m√©todo de pago original
"""
            
            if categoria:
                categoria_politicas = {
                    "Electr√≥nicos": "üì± Electr√≥nicos: Garant√≠a extendida de 30 d√≠as, incluye smartphones, tablets y dispositivos m√≥viles.",
                    "Computadoras": "üíª Computadoras: Garant√≠a de 15 d√≠as, incluye laptops, desktops y componentes.",
                    "Audio": "üéß Audio: Garant√≠a de 14 d√≠as, incluye auriculares, altavoces y equipos de sonido.",
                    "Tablets": "üì± Tablets: Garant√≠a de 7 d√≠as, dispositivos t√°ctiles y tablets."
                }
                
                if categoria in categoria_politicas:
                    return f"{politicas_generales}\n\n{categoria_politicas[categoria]}"
                else:
                    return f"{politicas_generales}\n\n‚ùì Categor√≠a '{categoria}' no encontrada. Consulte las categor√≠as disponibles."
            
            return politicas_generales
            
        except Exception as e:
            error_msg = f"‚ùå Error al consultar pol√≠ticas: {str(e)}"
            logger.error(error_msg)
            return error_msg
    
    def _verificar_condiciones_adicionales(self, producto_id: str, dias_transcurridos: int) -> str:
        """Verifica condiciones adicionales para la devoluci√≥n."""
        producto = self.productos_db[producto_id]
        
        condiciones = []
        
        # Verificar si es cliente premium
        if dias_transcurridos > producto["garantia_dias"] * 0.8:
            condiciones.append("‚ö†Ô∏è Nota: Est√° cerca del l√≠mite del per√≠odo de devoluci√≥n.")
        
        # Verificar precio alto
        if producto["precio"] > 500:
            condiciones.append("üíé Producto de alto valor: Se requiere inspecci√≥n adicional.")
        
        return "\n".join(condiciones) if condiciones else "‚úÖ Todas las condiciones cumplidas."
    
    def _generar_codigo_devolucion(self) -> str:
        """Genera un c√≥digo √∫nico de devoluci√≥n."""
        timestamp = datetime.now().strftime("%Y%m%d%H%M%S")
        random_suffix = ''.join(random.choices(string.ascii_uppercase + string.digits, k=4))
        return f"DEV-{timestamp}-{random_suffix}"


# Instancia global de las herramientas
producto_tools = ProductoTools()


def verificar_elegibilidad_producto(producto_id: str, fecha_compra: str) -> str:
    """
    Funci√≥n wrapper para verificar elegibilidad de producto.
    Compatible con LangChain Tool.
    """
    return producto_tools.verificar_elegibilidad_producto(producto_id, fecha_compra)


def generar_etiqueta_devolucion(producto_id: str, cliente_id: str) -> str:
    """
    Funci√≥n wrapper para generar etiqueta de devoluci√≥n.
    Compatible con LangChain Tool.
    """
    return producto_tools.generar_etiqueta_devolucion(producto_id, cliente_id)


def consultar_politicas_devolucion(categoria: str = None) -> str:
    """
    Funci√≥n wrapper para consultar pol√≠ticas de devoluci√≥n.
    Compatible con LangChain Tool.
    """
    return producto_tools.consultar_politicas_devolucion(categoria)


if __name__ == "__main__":
    # Pruebas de las herramientas
    print("üß™ Probando herramientas del EcoAgent...")
    
    # Prueba de verificaci√≥n de elegibilidad
    print("\n1. Verificando elegibilidad:")
    resultado1 = verificar_elegibilidad_producto("PROD001", "2024-10-01")
    print(resultado1)
    
    # Prueba de generaci√≥n de etiqueta
    print("\n2. Generando etiqueta:")
    resultado2 = generar_etiqueta_devolucion("PROD001", "CLI001")
    print(resultado2)
    
    # Prueba de consulta de pol√≠ticas
    print("\n3. Consultando pol√≠ticas:")
    resultado3 = consultar_politicas_devolucion("Electr√≥nicos")
    print(resultado3)
